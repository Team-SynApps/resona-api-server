server:
  port: 8080
  servlet:
    context-path: /api/${api.version}
  name: resona
  forward-headers-strategy: framework
  tomcat:
    mbeanregistry:
      enabled: true
    threads:
      max: 400
      min-spare: 20
    max-connections: 10000
    accept-count: 200
    connection-timeout: 20000

api:
  version: v1

spring:
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 50MB
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev} # 기본값(dev)
  config:
    import: optional:file:./.env[.properties] # 환경변수 로드

# JWT 설정
jwt:
  secret: ${JWT_SECRET}

# OAuth 설정
oauth:
  redirect-scheme: redirect-uri
  apple:
    iss: https://appleid.apple.com
    client-id: ${APPLE_CLIENT_ID}
    nonce: ${APPLE_NONCE}

# CORS 설정
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGIN}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# 토큰 관련 설정
app:
  auth:
    tokenSecret: ${AUTH_TOKEN_SECRET}
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - https://localhost:3000/oauth/redirect
      - resona

# 로깅 설정
logging:
  config: classpath:log4j2-spring.xml

# Actuator 설정
management:
  endpoints:
    web:
      exposure:
        include: "prometheus,health,metrics"
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  server:
    port: 8080
  metrics:
    tags:
      application: resona
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 500ms, 1500ms
  prometheus:
    metrics:
      export:
        enabled: true

fcm:
  path: ${FCM_JSON_PATH}

discord:
  webhook:
    report: ${DISCORD_REPORT_WEBHOOK_URL}
    deploy: ${DISCORD_DEPLOY_WEBHOOK_URL}