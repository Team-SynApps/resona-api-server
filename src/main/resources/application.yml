server:
  port: 8080
  servlet:
    context-path: /api/${api.version}
  name: resona

api:
  version: v1

spring:
  profiles:
    active: prod
  config:
    import: optional:file:./.env[.properties]
  datasource:
    url: ${MYSQL_DATABASE_URL}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
  data:
    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT}
      authentication-database: ${MONGO_AUTH_DATABASE}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
#      database:
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        #show_sql: true
#        format_sql: true
        default_batch_fetch_size: 500
#        dialect: org.hibernate.spatial.dialect.mysql.MySQL8SpatialDialect
    #        database-platform: org.hibernate.spatial.dialect.mysql.MySQL8SpatialDialect
#    database: mysql
    open-in-view: false

  mvc:
    path match:
      matching-strategy: ant_path_matcher
# oauth
  security:
    oauth2.client:
      registration:
        google:
          clientId: ${GOOGLE_CLIENT_ID}
          clientSecret: ${GOOGLE_CLIENT_SECRET}
          scope:
            - email
            - profile
        facebook:
          clientId: ${FACEBOOK_CLIENT_ID}
          clientSecret: ${FACEBOOK_CLIENT_SECRET}
          scope:
            - email
            - public_profile

  # 이메일
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
jwt:
  secret: ${JWT_SECRET}

oauth:
  apple:
    iss: https://appleid.apple.com
    client-id: ${APPLE_CLIENT_ID}
    nonce: ${APPLE_NONCE}

# cors 설정
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGIN}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600


# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: ${AUTH_TOKEN_SECRET}
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - https://localhost:3000/oauth/redirect

cloud:
  aws:
    s3:
      bucket: ${S3_BUCKET_NAME}
    stack.auto: false
    region.static: ${REGION}
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}

# actuator
management:
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always
  server:
    port: 8080
