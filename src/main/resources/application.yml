server:
  port: 8080
  servlet:
    context-path: /api/${api.version}
  name: resona
  forward-headers-strategy: framework
  tomcat:
    mbeanregistry:
      enabled: true
    threads:
      max: 400
      min-spare: 20
    max-connections: 10000
    accept-count: 200
    connection-timeout: 20000
api:
  version: v1

spring:
  profiles:
    active: prod
  config:
    import: optional:file:./.env[.properties]
  datasource:
    url: ${MYSQL_DATABASE_URL}
    username: ${MYSQL_USERNAME}
    password: ${MYSQL_PASSWORD}
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      idle-timeout: 300000
      connection-timeout: 30000
      max-lifetime: 1200000
  data:
    mongodb:
      host: ${MONGO_HOST}
      port: ${MONGO_PORT}
      authentication-database: ${MONGO_AUTH_DATABASE}
      username: ${MONGO_USERNAME}
      password: ${MONGO_PASSWORD}
  task:
    execution:
      pool:
        core-size: 20
        max-size: 100
        queue-capacity: 200
        keep-alive: 60s
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        default_batch_fetch_size: 500
    open-in-view: false

  mvc:
    path match:
      matching-strategy: ant_path_matcher
  # oauth
  security:
    oauth2.client:
      registration:
        google:
          clientId: ${GOOGLE_CLIENT_ID}
          clientSecret: ${GOOGLE_CLIENT_SECRET}
          scope:
            - email
            - profile
        facebook:
          clientId: ${FACEBOOK_CLIENT_ID}
          clientSecret: ${FACEBOOK_CLIENT_SECRET}
          scope:
            - email
            - public_profile

  # 이메일
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${GMAIL_USERNAME}
    password: ${GMAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          timeout: 5000
          starttls:
            enable: true
jwt:
  secret: ${JWT_SECRET}

oauth:
  apple:
    iss: https://appleid.apple.com
    client-id: ${APPLE_CLIENT_ID}
    nonce: ${APPLE_NONCE}

# cors 설정
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGIN}
  allowed-methods: GET,POST,PUT,DELETE,OPTIONS
  allowed-headers: '*'
  max-age: 3600

# 토큰 관련 secret Key 및 RedirectUri 설정
app:
  auth:
    tokenSecret: ${AUTH_TOKEN_SECRET}
    tokenExpiry: 1800000
    refreshTokenExpiry: 604800000
  oauth2:
    authorizedRedirectUris:
      - https://localhost:3000/oauth/redirect

# 기존 설정에 추가
logging:
  config: classpath:log4j2-spring.xml

oci:
  config:
    userId: ${OCI_BUCKET_USER_ID}
    tenancyId: ${OCI_BUCKET_TENANCY_ID}
    fingerprint: ${OCI_BUCKET_FINGERPRINT}
    privateKeyPath: ${BUCKET_PRIVATE_KEY_PATH}
    region: ${OCI_BUCKET_REGION}
  storage:
    bucketName: ${OCI_BUCKET_NAME}
    compartmentId: ${OCI_BUCKET_COMPARTMENT_ID}
    namespace: ${OCI_BUCKET_NAMESPACE}
    region: ${OCI_BUCKET_REGION}
    buffer-bucket-name: ${OCI_BUFFER_BUCKET_NAME}
    disk-bucket-name: ${OCI_DISK_BUCKET_NAME}

# actuator
management:
  endpoints:
    web:
      exposure:
        include: "prometheus,health,metrics"
      base-path: /actuator
  endpoint:
    health:
      show-details: always
    prometheus:
      enabled: true
  server:
    port: 8080
  metrics:
    tags:
      application: resona
    distribution:
      percentiles-histogram:
        http.server.requests: true
      slo:
        http.server.requests: 500ms, 1500ms
  prometheus:
    metrics:
      export:
        enabled: true