name: Spring Boot & Gradle & Docker & OCI CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Set up JDK 17
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.0
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ steps.timestamp.outputs.timestamp }}
        uses: docker/build-push-action@v6.8.0
        with:
          context: .
          push: true
          no-cache: true
          platforms: linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/api-server:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/api-server:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Setup OCI config
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${{ secrets.OCI_CLI_USER }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_CLI_TENANCY }}" >> ~/.oci/config
          echo "region=${{ secrets.OCI_CLI_REGION }}" >> ~/.oci/config
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Install OCI CLI
        run: |
          sudo apt update
          sudo apt install python3-pip -y
          pip3 install oci-cli

      - name: Fix OCI CLI file permissions
        run: |
          oci setup repair-file-permissions --file ~/.oci/config

      - name: Create SSH Key for Bastion
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_bastion -N ""  
          touch ~/.ssh/known_hosts

      - name: Create Bastion Session
        run: |
          oci bastion session create-managed-ssh \
          --bastion-id ${{ secrets.BASTION_OCID }} \
          --target-resource-id ${{ secrets.TARGET_INSTANCE_OCID }} \
          --target-os-username ubuntu \
          --ssh-public-key-file ~/.ssh/id_rsa_bastion.pub \
          --wait-for-state SUCCEEDED \
          --wait-interval-seconds 10

      - name: Get Bastion Session OCID
        id: get-session-ocid
        run: |
          echo oci bastion session list --bastion-id ${{ secrets.BASTION_OCID }} --query 'data'
          SESSION_DETAILS=$(oci bastion session list --bastion-id ${{ secrets.BASTION_OCID }} --query 'data[0]')
          echo "SESSION_OCID=$(echo $SESSION_DETAILS | jq -r '.id')" >> $GITHUB_ENV

      - name: Get SSH Command and key scan
        run: |
          SSH_COMMAND=$(oci bastion session get --session-id ${{ env.SESSION_OCID }} --query 'data."ssh-metadata".command' --raw-output)
          echo "Original SSH_COMMAND: $SSH_COMMAND"

          BASTION_KEY_PATH="~/.ssh/id_rsa_bastion"
          SSH_COMMAND=$(echo "$SSH_COMMAND" | sed 's|<privateKey>|'"$BASTION_KEY_PATH"'|g')

          echo "Final SSH_COMMAND: $SSH_COMMAND"
          echo "SSH_COMMAND=$SSH_COMMAND" >> $GITHUB_ENV

          BASTION_HOST=$(echo $SSH_COMMAND | awk -F'@' '{print $2}' | awk '{print $1}' | tr -d '"')
          ssh-keyscan -H $BASTION_HOST >> ~/.ssh/known_hosts

      - name: Deploy to Private Instance
        env:
          SSH_COMMAND: ${{ env.SSH_COMMAND }}
          DOCKER_IMAGE: "${{ secrets.DOCKER_USERNAME }}/api-server"  # 여기서 명시적으로 정의
        run: |
          chmod 600 ~/.ssh/id_rsa_bastion

          echo "SSH Command: $SSH_COMMAND"
          SSH_COMMAND="${SSH_COMMAND/ssh /ssh -vvv -o StrictHostKeyChecking=no }"

          BUILD_TIMESTAMP="${{ needs.build.outputs.timestamp }}"

          
          eval $SSH_COMMAND << 'EOF'
            
            DOCKER_IMAGE="$1"
            BUILD_TIMESTAMP="$2"

            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            echo "${{ secrets.ENV_PROD_FILE }}" | base64 --decode > .env

            CONTAINER_ID=$(docker ps -aq -f name=api-server)
            if [ -n "$CONTAINER_ID" ]; then
              echo "[INFO] Stopping and removing existing container: $CONTAINER_ID"
              docker stop "$CONTAINER_ID"
              docker rm "$CONTAINER_ID"
            else
              echo "[INFO] No existing container to remove."
            fi

            echo "Build Timestamp: $BUILD_TIMESTAMP"
            echo "Docker Image: $DOCKER_IMAGE"  # 디버깅을 위해 추가

            
            FULL_IMAGE_NAME="${DOCKER_IMAGE}:${BUILD_TIMESTAMP}"
            echo "Pulling image: $FULL_IMAGE_NAME"

            docker pull "$FULL_IMAGE_NAME" && \
            docker run --name api-server -d -p 8080:8080 --env-file .env "$FULL_IMAGE_NAME"
          
            KEEP_TAGS=$(docker images "$DOCKER_IMAGE" --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 5 | xargs)
            ALL_TAGS=$(docker images "$DOCKER_IMAGE" --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | xargs)

            echo "KEEP_TAGS: $KEEP_TAGS"
            echo "ALL_TAGS: $ALL_TAGS"

            for tag in $ALL_TAGS; do
              if [ -n "$tag" ] && ! echo "$KEEP_TAGS" | grep -q "$tag"; then
                FULL_IMAGE_NAME="${DOCKER_IMAGE}:${tag}"
                echo "[INFO] Attempting to remove image: $FULL_IMAGE_NAME"

                if docker image inspect "$FULL_IMAGE_NAME" >/dev/null 2>&1; then
                  docker rmi "$FULL_IMAGE_NAME" || {
                    echo "[WARN] Failed to remove image: $FULL_IMAGE_NAME"
                    echo "[DEBUG] Docker images list:"
                    docker images | grep "$DOCKER_IMAGE"
                  }
                else
                  echo "[INFO] Image not found: $FULL_IMAGE_NAME"
                fi
              fi
            done

            echo "[INFO] Deployment completed."
          EOF
          "$DOCKER_IMAGE" "$BUILD_TIMESTAMP"

      - name: Clean up Bastion Session
        if: always()
        run: |
          oci bastion session delete --session-id ${{ env.SESSION_OCID }} --force

      - name: Rollback on Failure
        if: failure()
        env:
          SSH_COMMAND: ${{ env.SSH_COMMAND }}
        run: |
          chmod 600 ~/.ssh/id_rsa_bastion
          
          eval "$SSH_COMMAND" << EOF
            FAILED_TAG=${{ needs.build.outputs.timestamp }}
            docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:$FAILED_TAG || true
            LAST_SUCCESSFUL_TAG=$(docker images --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 1)
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:$LAST_SUCCESSFUL_TAG
            docker rm -f api-server || true
            docker run -d --name api-server -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:$LAST_SUCCESSFUL_TAG
          EOF