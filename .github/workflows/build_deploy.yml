name: Spring Boot & Gradle & Docker & EC2 CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}  # 'timestamp' 값을 outputs로 설정
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Build Docker Image For Spring
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_TAG: ${{ steps.timestamp.outputs.timestamp }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
          docker build -t $DOCKER_USERNAME/api-server:$IMAGE_TAG .
          docker push $DOCKER_USERNAME/api-server:$IMAGE_TAG
          docker tag $DOCKER_USERNAME/api-server:$IMAGE_TAG $DOCKER_USERNAME/api-server:latest
          docker push $DOCKER_USERNAME/api-server:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # 'build' job이 완료된 후에 'deploy' job 실행
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: EC2 Docker Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            echo "${{ secrets.ENV_PROD_FILE }}" | base64 --decode > .env

            # Debugging: Check Docker Username and Image Tag
            echo "Docker Username: ${{ secrets.DOCKER_USERNAME }}"
            echo "Image Tag: ${{ needs.build.outputs.timestamp }}"  # 'needs'를 사용하여 build job의 출력 참조

            docker rm -f $(docker ps -qa) || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:latest || true

            # Pulling the image
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }}  # 'needs'를 사용하여 timestamp 참조

            # Check if the image was successfully pulled
            docker images

            # Running the container
            docker run --name api-server -dit --network synapps -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }}

      - name: Health Check
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Waiting for application to start..."
            for i in {1..15}
            do
              if curl -sSf http://localhost:8080/api/v1/actuator/health > /dev/null 2>&1
              then
                echo "Application is healthy"
                exit 0
              fi
              echo "Attempt $i: Application is not yet healthy. Waiting..."
              sleep 10
            done
            echo "Application failed to become healthy within timeout"
            docker logs api-server
            exit 1

      - name: Rollback on Failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Deployment failed, rolling back..."
            docker rm -f api-server || true
            docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }} || true
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:latest
            docker run --name api-server -dit --network synapps -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:latest
            echo "Rollback completed"
