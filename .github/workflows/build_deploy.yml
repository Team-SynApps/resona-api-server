name: Spring Boot & Gradle & Docker & OCI CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Cache Docker Buildx
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            buildx-${{ runner.os }}-

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v2
        env:
          IMAGE_TAG: ${{ steps.timestamp.outputs.timestamp }}
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/chat-server:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/chat-server:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: OCI Docker Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ubuntu
          key: ${{ secrets.ORACLE_KEY }}
          script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            echo "${{ secrets.ENV_PROD_FILE }}" | base64 --decode > .env

            echo "Docker Username: ${{ secrets.DOCKER_USERNAME }}"
            echo "Image Tag: ${{ needs.build.outputs.timestamp }}"

            # 기존 chat-server 컨테이너 중지 및 제거
            if [ $(docker ps -aq -f name=chat-server) ]; then
              echo "Stopping and removing existing chat-server container..."
              docker stop chat-server
              docker rm chat-server
            fi

            # 새 이미지 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/chat-server:${{ needs.build.outputs.timestamp }}

            # 이미지 pull 확인
            docker images

            # 새 컨테이너 실행
            docker run --name chat-server -d -p 9000:9000 --env-file .env ${{ secrets.DOCKER_USERNAME }}/chat-server:${{ needs.build.outputs.timestamp }}

      - name: Cleanup Old Images
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ubuntu
          key: ${{ secrets.ORACLE_KEY }}
          script: |
            echo "Cleaning up old images..."
            KEEP_TAGS=$(docker images ${{ secrets.DOCKER_USERNAME }}/chat-server --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 5)
            ALL_TAGS=$(docker images ${{ secrets.DOCKER_USERNAME }}/chat-server --format "{{.Tag}}" | grep -E '^[0-9]{14}$')
            for tag in $ALL_TAGS; do
              if ! echo "$KEEP_TAGS" | grep -q "$tag"; then
                echo "Removing old image: ${{ secrets.DOCKER_USERNAME }}/chat-server:$tag"
                docker rmi ${{ secrets.DOCKER_USERNAME }}/chat-server:$tag
              fi
            done
            echo "Cleanup completed"

      - name: Rollback on Failure
        if: failure()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ORACLE_HOST }}
          username: ubuntu
          key: ${{ secrets.ORACLE_KEY }}
          script: |
            echo "Deployment failed, rolling back..."
            FAILED_TAG=${{ needs.build.outputs.timestamp }}
            docker rmi ${{ secrets.DOCKER_USERNAME }}/chat-server:$FAILED_TAG || true
            LAST_SUCCESSFUL_TAG=$(docker images --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 1)
            docker pull ${{ secrets.DOCKER_USERNAME }}/chat-server:$LAST_SUCCESSFUL_TAG
            docker rm -f chat-server || true
            docker run -d --name chat-server -p 9000:9000 --env-file .env ${{ secrets.DOCKER_USERNAME }}/chat-server:$LAST_SUCCESSFUL_TAG
            echo "Rollback to $LAST_SUCCESSFUL_TAG completed"
