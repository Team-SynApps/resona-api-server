name: Spring Boot & Gradle & Docker & OCI CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Set up JDK 17
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4.1.0
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Cache Docker Buildx
        uses: actions/cache@v4.1.0
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            buildx-${{ runner.os }}-

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.0
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ steps.timestamp.outputs.timestamp }}
        uses: docker/build-push-action@v6.8.0
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/api-server:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/api-server:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Cache OCI CLI
        uses: actions/cache@v4.1.0
        with:
          path: ~/.oci
          key: oci-cli-${{ runner.os }}-${{ hashFiles('~/.oci') }}
          restore-keys: |
            oci-cli-${{ runner.os }}-

      - name: Install OCI CLI
        if: steps.cache-oci-cli.outputs.cache-hit != 'true'
        run: |
          curl -L https://raw.githubusercontent.com/oracle/oci-cli/master/scripts/install/install.sh | bash -s -- --accept-all-defaults

      - name: Verify OCI CLI installation
        run: |
          oci --version

      - name: Create SSH Key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          touch ~/.ssh/known_hosts

      - name: Create Bastion Session
        run: |
          oci bastion session create-managed-ssh \
            --bastion-id ${{ secrets.BASTION_OCID }} \
            --target-resource-id ${{ secrets.TARGET_INSTANCE_OCID }} \
            --target-os-username ubuntu \ # 타겟 인스턴스의 사용자 이름을 지정해야 합니다 (예: opc, ubuntu 등)
            --ssh-public-key-file ~/.ssh/id_rsa.pub \
            --wait-for-state SUCCEEDED \
            --wait-interval-seconds 10

      - name: Get Bastion Session OCID
        id: get-session-ocid
        run: |
          SESSION_DETAILS=$(oci bastion session list --bastion-id ${{ secrets.BASTION_OCID }} --query 'data[0]')
          echo "SESSION_OCID=$(echo $SESSION_DETAILS | jq -r '.id')" >> $GITHUB_ENV

      - name: Wait for Bastion Session
        run: |
          while true; do
            STATE=$(oci bastion session get --session-id ${{ env.SESSION_OCID }} --query "data.lifecycle-state" --raw-output)
            if [ "$STATE" == "SUCCEEDED" ]; then
              echo "Session is SUCCEEDED"
              break
            fi
            echo "Current state: $STATE. Waiting for session to become SUCCEEDED..."
            sleep 10
          done

      - name: Get SSH Command and Collect Host Keys
        run: |
          SSH_COMMAND=$(oci bastion session get --session-id ${{ env.SESSION_OCID }} --query 'data.ssh-metadata.command' --raw-output)
          echo "SSH_COMMAND=$SSH_COMMAND" >> $GITHUB_ENV
          
          BASTION_HOST=$(echo $SSH_COMMAND | awk '{print $3}' | cut -d@ -f2)
          ssh-keyscan -H $BASTION_HOST >> ~/.ssh/known_hosts
          
          TARGET_HOST=$(echo $SSH_COMMAND | awk '{print $4}')
          ssh-keyscan -H $TARGET_HOST >> ~/.ssh/known_hosts

      - name: Deploy to Private Instance
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_COMMAND: ${{ env.SSH_COMMAND }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          $SSH_COMMAND -i private_key.pem << EOF
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            echo "${{ secrets.ENV_PROD_FILE }}" | base64 --decode > .env

            if [ $(docker ps -aq -f name=api-server) ]; then
              docker stop api-server
              docker rm api-server
            fi

            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }}
            docker run --name api-server -d -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }}

            KEEP_TAGS=$(docker images ${{ secrets.DOCKER_USERNAME }}/api-server --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 5)
            ALL_TAGS=$(docker images ${{ secrets.DOCKER_USERNAME }}/api-server --format "{{.Tag}}" | grep -E '^[0-9]{14}$')
            for tag in $ALL_TAGS; do
              if ! echo "$KEEP_TAGS" | grep -q "$tag"; then
                docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:$tag || true
              fi
            done
          EOF

      - name: Clean up Bastion Session
        if: always()
        run: |
          oci bastion session delete --session-id ${{ env.SESSION_OCID }} --force

      - name: Rollback on Failure
        if: failure()
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_COMMAND: ${{ env.SSH_COMMAND }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          $SSH_COMMAND -i private_key.pem << EOF
            FAILED_TAG=${{ needs.build.outputs.timestamp }}
            docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:$FAILED_TAG || true
            LAST_SUCCESSFUL_TAG=$(docker images --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 1)
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:$LAST_SUCCESSFUL_TAG
            docker rm -f api-server || true
            docker run -d --name api-server -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:$LAST_SUCCESSFUL_TAG
          EOF
