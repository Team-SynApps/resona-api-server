# .github/workflows/ci-cd.yml

name: Spring Boot & Gradle & Docker & OCI CI/CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  # ===================================================================
  #  CI Job: Run Tests
  # ===================================================================
  ci-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Set up JDK 17
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Run Gradle tests
        run: ./gradlew test

      - name: Upload Test Report
        if: always() # 테스트 실패 시에도 리포트 업로드
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: build/reports/tests/test

  # ===================================================================
  #  Build Job: Build & Push Docker Image
  # ===================================================================
  build:
    runs-on: ubuntu-latest
    needs: ci-test # Run after ci-test job succeeds
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Set up JDK 17
        uses: actions/setup-java@v4.4.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.7.0
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ steps.timestamp.outputs.timestamp }}
        uses: docker/build-push-action@v6.8.0
        with:
          context: .
          push: true
          no-cache: true
          platforms: linux/arm64
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/api-server:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKER_USERNAME }}/api-server:latest

  # ===================================================================
  #  Deploy Job: Deploy to OCI Instance
  # ===================================================================
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Setup OCI config
        run: |
          mkdir -p ~/.oci
          echo "[DEFAULT]" > ~/.oci/config
          echo "user=${{ secrets.OCI_CLI_USER }}" >> ~/.oci/config
          echo "fingerprint=${{ secrets.OCI_CLI_FINGERPRINT }}" >> ~/.oci/config
          echo "key_file=~/.oci/oci_api_key.pem" >> ~/.oci/config
          echo "tenancy=${{ secrets.OCI_CLI_TENANCY }}" >> ~/.oci/config
          echo "region=${{ secrets.OCI_CLI_REGION }}" >> ~/.oci/config
          echo "${{ secrets.OCI_CLI_KEY_CONTENT }}" > ~/.oci/oci_api_key.pem
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Install OCI CLI
        run: |
          sudo apt update
          sudo apt install python3-pip -y
          pip3 install oci-cli

      - name: Fix OCI CLI file permissions
        run: oci setup repair-file-permissions --file ~/.oci/config

      - name: Create SSH Key for Bastion
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa_bastion -N ""
          touch ~/.ssh/known_hosts

      - name: Create Bastion Session
        id: create-session # Add an id to reference this step
        run: |
          SESSION_OCID=$(oci bastion session create-managed-ssh \
            --bastion-id ${{ secrets.BASTION_OCID }} \
            --target-resource-id ${{ secrets.TARGET_INSTANCE_OCID }} \
            --target-os-username ubuntu \
            --ssh-public-key-file ~/.ssh/id_rsa_bastion.pub \
            --wait-for-state SUCCEEDED \
            --wait-interval-seconds 10 \
            --query 'data.id' --raw-output)
          echo "SESSION_OCID=$SESSION_OCID" >> $GITHUB_ENV

      - name: Get SSH Command and key scan
        run: |
          SSH_COMMAND=$(oci bastion session get --session-id ${{ env.SESSION_OCID }} --query 'data."ssh-metadata".command' --raw-output)
          BASTION_KEY_PATH="~/.ssh/id_rsa_bastion"
          SSH_COMMAND=$(echo "$SSH_COMMAND" | sed 's|<privateKey>|'"$BASTION_KEY_PATH"'|g')
          echo "SSH_COMMAND=$SSH_COMMAND" >> $GITHUB_ENV
          BASTION_HOST=$(echo $SSH_COMMAND | awk -F'@' '{print $2}' | awk '{print $1}' | tr -d '"')
          ssh-keyscan -H $BASTION_HOST >> ~/.ssh/known_hosts

      - name: Deploy to Private Instance
        env:
          SSH_COMMAND: ${{ env.SSH_COMMAND }}
        run: |
          chmod 600 ~/.ssh/id_rsa_bastion
          
          # Execute commands on the remote server via the bastion session
          eval $SSH_COMMAND << EOF
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:latest
            ./restart-prod.sh
          EOF

      - name: Clean up Bastion Session
        if: always()
        run: |
          if [ -n "${{ env.SESSION_OCID }}" ]; then
            oci bastion session delete --session-id ${{ env.SESSION_OCID }} --force
          else
            echo "Session OCID not found, skipping cleanup."
          fi

#      - name: Rollback on Failure
#        if: failure()
#        needs: build # Make sure it runs after a failed deploy but gets timestamp from build
#        env:
#          SSH_COMMAND: ${{ env.SSH_COMMAND }} # This might not be available if previous steps failed
#        run: |
#          # Rollback logic needs to be re-evaluated as SSH_COMMAND might not be set
#          # It's better to create a new bastion session for rollback.