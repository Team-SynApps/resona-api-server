name: Spring Boot & Gradle & Docker & OCI CD

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      timestamp: ${{ steps.timestamp.outputs.timestamp }}
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Cache Docker Buildx
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            buildx-${{ runner.os }}-

      - name: Generate Timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ steps.timestamp.outputs.timestamp }}
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache,mode=max \
            -t ${{ secrets.DOCKER_USERNAME }}/api-server:${{ env.IMAGE_TAG }} \
            -t ${{ secrets.DOCKER_USERNAME }}/api-server:latest \
            . \
            --push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.0

      - name: Create SSH Key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N ""
          touch ~/.ssh/known_hosts

      - name: Create Bastion Session
        run: |
          SESSION_OUTPUT=$(oci bastion session create-session \
            --bastion-id ${{ secrets.BASTION_OCID }} \
            --target-resource-id ${{ secrets.TARGET_INSTANCE_OCID }} \
            --session-type MANAGED_SSH \
            --ssh-public-key-file ~/.ssh/id_rsa.pub)
          echo "SESSION_OCID=$(echo "$SESSION_OUTPUT" | jq -r '.data.id')" >> $GITHUB_ENV

      - name: Wait for Bastion Session
        run: |
          while true; do
            STATE=$(oci bastion session get --session-id ${{ env.SESSION_OCID }} --query "data.\"lifecycle-state\"" --raw-output)
            if [ "$STATE" == "ACTIVE" ]; then
              break
            fi
            sleep 10
          done

      - name: Get SSH Command and Collect Host Keys
        run: |
          SSH_COMMAND=$(oci bastion session get --session-id ${{ env.SESSION_OCID }} --query 'data."ssh-metadata"."command"' --raw-output)
          echo "SSH_COMMAND=$SSH_COMMAND" >> $GITHUB_ENV
          BASTION_HOST=$(echo $SSH_COMMAND | awk '{print $3}' | cut -d@ -f2)
          ssh-keyscan -H $BASTION_HOST >> ~/.ssh/known_hosts
          TARGET_HOST=$(echo $SSH_COMMAND | awk '{print $4}')
          ssh-keyscan -H $TARGET_HOST >> ~/.ssh/known_hosts

      - name: Deploy to Private Instance
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_COMMAND: ${{ steps.get_ssh_command.outputs.output }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          $SSH_COMMAND -i private_key.pem << EOF
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            echo "${{ secrets.ENV_PROD_FILE }}" | base64 --decode > .env

            echo "Docker Username: ${{ secrets.DOCKER_USERNAME }}"
            echo "Image Tag: ${{ needs.build.outputs.timestamp }}"

            if [ \$(docker ps -aq -f name=api-server) ]; then
              echo "Stopping and removing existing api-server container..."
              docker stop api-server
              docker rm api-server
            fi

            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }}
            docker run --name api-server -d -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:${{ needs.build.outputs.timestamp }}

            echo "Cleaning up old images..."
            KEEP_TAGS=\$(docker images ${{ secrets.DOCKER_USERNAME }}/api-server --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 5)
            ALL_TAGS=\$(docker images ${{ secrets.DOCKER_USERNAME }}/api-server --format "{{.Tag}}" | grep -E '^[0-9]{14}$')
            for tag in \$ALL_TAGS; do
              if ! echo "\$KEEP_TAGS" | grep -q "\$tag"; then
                echo "Removing old image: ${{ secrets.DOCKER_USERNAME }}/api-server:\$tag"
                docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:\$tag
              fi
            done
            echo "Cleanup completed"
          EOF

      - name: Clean up Bastion Session
        if: always()
        run: |
          oci bastion session delete --session-id ${{ env.SESSION_OCID }} --force

      - name: Rollback on Failure
        if: failure()
        env:
          PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_COMMAND: ${{ steps.get_ssh_command.outputs.output }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          $SSH_COMMAND -i private_key.pem << EOF
            echo "Deployment failed, rolling back..."
            FAILED_TAG=${{ needs.build.outputs.timestamp }}
            docker rmi ${{ secrets.DOCKER_USERNAME }}/api-server:\$FAILED_TAG || true
            LAST_SUCCESSFUL_TAG=\$(docker images --format "{{.Tag}}" | grep -E '^[0-9]{14}$' | sort -r | head -n 1)
            docker pull ${{ secrets.DOCKER_USERNAME }}/api-server:\$LAST_SUCCESSFUL_TAG
            docker rm -f api-server || true
            docker run -d --name api-server -p 8080:8080 --env-file .env ${{ secrets.DOCKER_USERNAME }}/api-server:\$LAST_SUCCESSFUL_TAG
            echo "Rollback to \$LAST_SUCCESSFUL_TAG completed"
          EOF
