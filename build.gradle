plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3' apply false
    id 'io.spring.dependency-management' version '1.1.4'
    id "co.uzzu.dotenv.gradle" version "4.0.0" apply false
}

allprojects {
    group = 'com.synapps'
    version = '0.0.1-SNAPSHOT'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: "java"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "java-test-fixtures"

    java {
        sourceCompatibility = '17'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    // Common Dependencies
    dependencies {
        // Lombok
        compileOnly "org.projectlombok:lombok"
        annotationProcessor "org.projectlombok:lombok"

        // Test
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testCompileOnly "org.projectlombok:lombok"
        testAnnotationProcessor "org.projectlombok:lombok"
    }

    dependencyManagement {
        imports {
            mavenBom 'com.oracle.oci.sdk:oci-java-sdk-bom:3.43.1'
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:2023.0.3"
            mavenBom 'org.springframework.boot:spring-boot-dependencies:3.2.3'
        }
    }

    tasks.named('test') {
        useJUnitPlatform {
            excludeTags 'local-only'
        }
    }

    // QueryDSL Config
    afterEvaluate { sub ->
        if (sub.name in ['member', 'social-media', 'notification']) {
            println ">>> [${sub.name}] Applying QueryDSL configuration."

            def generatedMainDir = sub.layout.buildDirectory.dir('generated/querydsl/main')
            def generatedTestDir = sub.layout.buildDirectory.dir('generated/querydsl/test')

            sourceSets {
                main {
                    java {
                        srcDirs += generatedMainDir
                    }
                }
                test {
                    java {
                        srcDirs += generatedTestDir
                    }
                }
            }

            tasks.named('compileJava') {
                options.getGeneratedSourceOutputDirectory().set(generatedMainDir)
            }
            tasks.named('compileTestJava') {
                options.getGeneratedSourceOutputDirectory().set(generatedTestDir)
            }

            tasks.register('cleanGenerated', Delete) {
                delete generatedMainDir, generatedTestDir
            }
            tasks.named('clean') {
                dependsOn tasks.named('cleanGenerated')
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {
        options.compilerArgs << "-parameters"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

tasks.named('test') {
    useJUnitPlatform {
        excludeTags 'local-only'
    }
}

